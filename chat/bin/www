#!/usr/bin/env node

const packageJSON = require('../package.json');
const config = require('../src/config');
const logger = require('../src/datasource/log/logger');
const databaseLayer = require('../src/datasource/databaseLayer');
const app = require('../app');
const http = require('http');

start().catch(error => {
    logger.error(error);
    process.exit(1);
});

async function start() {
    logger.info(`+=====================================================`);
    logger.info(`| ${packageJSON.name}, version: ${packageJSON.version}`);
    logger.info(`+-----------------------------------------------------`);

    await databaseLayer.init();

    const port = Number(config.port);

    const server = http.createServer(app);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = 'Port ' + config.port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const addr = this.address();
    logger.debug('Listening on port ' + addr.port);
}
